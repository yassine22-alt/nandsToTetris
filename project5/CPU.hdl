// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    And(a=instruction[15] , b=instruction[5] , out=AluToA );
    Mux16(a=instruction, b=AluOut , sel=AluToA , out=M1out );

    Not(in=instruction[15] , out=nomsb );
    Or(a=nomsb , b=AluToA , out=loadA );

    ARegister(in=M1out , load= loadA, out=ArOut );

    Mux16(a=ArOut , b=inM , sel=instruction[12] , out=M2out );

    And(a=instruction[4] , b=instruction[15] , out=loadD );
    DRegister(in=AluOut , load=loadD , out=DrOut );

    ALU(x=DrOut , y=M2out , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=AluOut , zr=null , ng=neg );
    
    // Set output to memory
    Or16(a=AluOut , b=false , out=outM );

    Or16(a=ArOut , b=false , out[0..14]=addressM);
    And(a=instruction[3] , b=instruction[15] , out=writeM );

    // Configure PC
    
    And(a=null , b=instruction[1] , out=jeq ); // if out == 0 and j2
    And(a=neg , b=instruction[2] , out=jlt );  // if out < 0 and j1 
    Or(a=null , b=neg , out=zorn );
    Not(in=zorn , out=pos );
    And(a=pos , b=instruction[0] , out=jgt );  // if out > 0 and j3
    And(a=instruction[0] , b=instruction[1] , out=j2j3 );
    And(a=j2j3 , b=instruction[2] , out=jmp ); // uncond jump

    Or(a=jeq , b=jlt , out=jle );
    Or(a=jle , b=jgt , out=jump );
    And(a=instruction[15] , b=jump , out=PCload );
    Not(in=PCload , out=PCinc );

    PC(in=ArOut , load=PCload , inc=PCinc , reset=reset , out[0..14]=pc );

    

	
}